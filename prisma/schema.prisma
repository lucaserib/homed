generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  clerkid         String         @unique @map("clerk_id")
  name            String
  email           String         @unique
  phone           String?
  dateOfBirth     DateTime?      @map("date_of_birth")
  gender          String?
  cpf             String?        @unique
  address         String?
  profileImageUrl String?        @map("profile_image_url")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  isActive        Boolean        @default(true) @map("is_active")
  consultations   Consultation[] @relation("PatientConsultations")
  ratings         Rating[]       @relation("PatientRatings")

  @@map("users")
}

model Doctor {
  id                String          @id @default(uuid())
  clerkid           String          @unique @map("clerk_id")
  email             String          @unique @map("email")
  firstName         String          @map("first_name")
  lastName          String          @map("last_name")
  dateOfBirth       DateTime?       @map("date_of_birth")
  specialty         String
  licenseNumber     String          @map("license_number") // CRM
  cpf               String?         @unique
  cnpj              String?         @unique
  companyName       String?         @map("company_name") // Razão Social
  address           String?
  profileImageUrl   String?         @map("profile_image_url")
  documentImageUrls String[]        @map("document_image_urls") // URLs das imagens de documentos enviados
  hourlyRate        Decimal         @map("hourly_rate")
  rating            Decimal         @default(0)
  serviceRadius     Int             @map("service_radius")
  isAvailable       Boolean         @default(false) @map("is_available")
  approvalStatus    String          @default("pending") @map("approval_status") // pending, approved, rejected
  adminNotes        String?         @map("admin_notes") // Notas do administrador sobre a aprovação/rejeição
  latitude          Decimal?
  longitude         Decimal?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  consultations     Consultation[]  @relation("DoctorConsultations")
  medicalRecords    MedicalRecord[] @relation("DoctorRecords")
  ratings           Rating[]        @relation("DoctorRatings")

  @@map("doctors")
}

model Admin {
  id        String   @id @default(uuid())
  clerkid   String   @unique @map("clerk_id")
  name      String
  email     String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  role      String   @default("admin") // admin, super_admin
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Consultation {
  consultationId  String    @id @default(uuid()) @map("consultation_id")
  patientId       String    @map("patient_id")
  doctorId        String?   @map("doctor_id")
  status          String    @default("pending")
  complaint       String?
  originAddress   String    @map("origin_address")
  originLatitude  Decimal   @map("origin_latitude")
  originLongitude Decimal   @map("origin_longitude")
  startTime       DateTime? @map("start_time")
  endTime         DateTime? @map("end_time")
  duration        Int?
  totalPrice      Decimal?  @map("total_price")
  paymentStatus   String    @default("pending") @map("payment_status")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  patient       User           @relation("PatientConsultations", fields: [patientId], references: [id])
  doctor        Doctor?        @relation("DoctorConsultations", fields: [doctorId], references: [id])
  messages      Message[]
  medicalRecord MedicalRecord?
  payment       Payment?
  rating        Rating?

  @@map("consultations")
}

model MedicalRecord {
  id             String   @id @default(uuid())
  consultationId String   @unique @map("consultation_id")
  patientId      String   @map("patient_id")
  doctorId       String   @map("doctor_id")
  diagnosis      String?
  treatment      String?
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  consultation Consultation @relation(fields: [consultationId], references: [consultationId])
  doctor       Doctor       @relation("DoctorRecords", fields: [doctorId], references: [id])

  @@map("medical_records")
}

model Message {
  id             String   @id @default(uuid())
  consultationId String   @map("consultation_id")
  senderId       String   @map("sender_id")
  senderType     String   @map("sender_type") // "patient" or "doctor"
  content        String
  read           Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  consultation Consultation @relation(fields: [consultationId], references: [consultationId])

  @@map("messages")
}

model Payment {
  id              String   @id @default(uuid())
  consultationId  String   @unique @map("consultation_id")
  stripePaymentId String?  @map("stripe_payment_id")
  amount          Decimal
  platformFee     Decimal  @map("platform_fee")
  doctorPayout    Decimal  @map("doctor_payout")
  status          String   @default("pending")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  consultation Consultation @relation(fields: [consultationId], references: [consultationId])

  @@map("payments")
}

model Rating {
  id             String   @id @default(uuid())
  consultationId String   @unique @map("consultation_id")
  patientId      String   @map("patient_id")
  doctorId       String   @map("doctor_id")
  rating         Int // 1-5
  comment        String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  consultation Consultation @relation(fields: [consultationId], references: [consultationId])
  patient      User         @relation("PatientRatings", fields: [patientId], references: [id])
  doctor       Doctor       @relation("DoctorRatings", fields: [doctorId], references: [id])

  @@map("ratings")
}

model EmailLog {
  id            String   @id @default(uuid())
  recipientId   String   @map("recipient_id")
  recipientType String   @map("recipient_type")
  subject       String
  body          String
  status        String   @default("sent")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("email_logs")
}
